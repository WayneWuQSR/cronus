// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: qsrmessage/message.proto

package qsrmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	PingServer(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
	ExecStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	QueryStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	QueryLocalStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	ExecStatementNoReturn(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	ExecStreamStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_ExecStreamStatementClient, error)
	QueryStreamStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_QueryStreamStatementClient, error)
	QueryStreamLocalStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_QueryStreamLocalStatementClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) PingServer(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/qsrmessage.MessageService/PingServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ExecStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/qsrmessage.MessageService/ExecStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) QueryStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/qsrmessage.MessageService/QueryStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) QueryLocalStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/qsrmessage.MessageService/QueryLocalStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ExecStatementNoReturn(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/qsrmessage.MessageService/ExecStatementNoReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ExecStreamStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_ExecStreamStatementClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/qsrmessage.MessageService/ExecStreamStatement", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceExecStreamStatementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_ExecStreamStatementClient interface {
	Recv() (*QueryReply, error)
	grpc.ClientStream
}

type messageServiceExecStreamStatementClient struct {
	grpc.ClientStream
}

func (x *messageServiceExecStreamStatementClient) Recv() (*QueryReply, error) {
	m := new(QueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) QueryStreamStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_QueryStreamStatementClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/qsrmessage.MessageService/QueryStreamStatement", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceQueryStreamStatementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_QueryStreamStatementClient interface {
	Recv() (*QueryReply, error)
	grpc.ClientStream
}

type messageServiceQueryStreamStatementClient struct {
	grpc.ClientStream
}

func (x *messageServiceQueryStreamStatementClient) Recv() (*QueryReply, error) {
	m := new(QueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) QueryStreamLocalStatement(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (MessageService_QueryStreamLocalStatementClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[2], "/qsrmessage.MessageService/QueryStreamLocalStatement", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceQueryStreamLocalStatementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_QueryStreamLocalStatementClient interface {
	Recv() (*QueryReply, error)
	grpc.ClientStream
}

type messageServiceQueryStreamLocalStatementClient struct {
	grpc.ClientStream
}

func (x *messageServiceQueryStreamLocalStatementClient) Recv() (*QueryReply, error) {
	m := new(QueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	PingServer(context.Context, *MessageRequest) (*MessageReply, error)
	ExecStatement(context.Context, *QueryRequest) (*QueryReply, error)
	QueryStatement(context.Context, *QueryRequest) (*QueryReply, error)
	QueryLocalStatement(context.Context, *QueryRequest) (*QueryReply, error)
	ExecStatementNoReturn(context.Context, *QueryRequest) (*QueryReply, error)
	ExecStreamStatement(*QueryRequest, MessageService_ExecStreamStatementServer) error
	QueryStreamStatement(*QueryRequest, MessageService_QueryStreamStatementServer) error
	QueryStreamLocalStatement(*QueryRequest, MessageService_QueryStreamLocalStatementServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) PingServer(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedMessageServiceServer) ExecStatement(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecStatement not implemented")
}
func (UnimplementedMessageServiceServer) QueryStatement(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatement not implemented")
}
func (UnimplementedMessageServiceServer) QueryLocalStatement(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLocalStatement not implemented")
}
func (UnimplementedMessageServiceServer) ExecStatementNoReturn(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecStatementNoReturn not implemented")
}
func (UnimplementedMessageServiceServer) ExecStreamStatement(*QueryRequest, MessageService_ExecStreamStatementServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecStreamStatement not implemented")
}
func (UnimplementedMessageServiceServer) QueryStreamStatement(*QueryRequest, MessageService_QueryStreamStatementServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStreamStatement not implemented")
}
func (UnimplementedMessageServiceServer) QueryStreamLocalStatement(*QueryRequest, MessageService_QueryStreamLocalStatementServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryStreamLocalStatement not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsrmessage.MessageService/PingServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).PingServer(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ExecStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ExecStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsrmessage.MessageService/ExecStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ExecStatement(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_QueryStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).QueryStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsrmessage.MessageService/QueryStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).QueryStatement(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_QueryLocalStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).QueryLocalStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsrmessage.MessageService/QueryLocalStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).QueryLocalStatement(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ExecStatementNoReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ExecStatementNoReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qsrmessage.MessageService/ExecStatementNoReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ExecStatementNoReturn(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ExecStreamStatement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).ExecStreamStatement(m, &messageServiceExecStreamStatementServer{stream})
}

type MessageService_ExecStreamStatementServer interface {
	Send(*QueryReply) error
	grpc.ServerStream
}

type messageServiceExecStreamStatementServer struct {
	grpc.ServerStream
}

func (x *messageServiceExecStreamStatementServer) Send(m *QueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_QueryStreamStatement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).QueryStreamStatement(m, &messageServiceQueryStreamStatementServer{stream})
}

type MessageService_QueryStreamStatementServer interface {
	Send(*QueryReply) error
	grpc.ServerStream
}

type messageServiceQueryStreamStatementServer struct {
	grpc.ServerStream
}

func (x *messageServiceQueryStreamStatementServer) Send(m *QueryReply) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_QueryStreamLocalStatement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).QueryStreamLocalStatement(m, &messageServiceQueryStreamLocalStatementServer{stream})
}

type MessageService_QueryStreamLocalStatementServer interface {
	Send(*QueryReply) error
	grpc.ServerStream
}

type messageServiceQueryStreamLocalStatementServer struct {
	grpc.ServerStream
}

func (x *messageServiceQueryStreamLocalStatementServer) Send(m *QueryReply) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qsrmessage.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingServer",
			Handler:    _MessageService_PingServer_Handler,
		},
		{
			MethodName: "ExecStatement",
			Handler:    _MessageService_ExecStatement_Handler,
		},
		{
			MethodName: "QueryStatement",
			Handler:    _MessageService_QueryStatement_Handler,
		},
		{
			MethodName: "QueryLocalStatement",
			Handler:    _MessageService_QueryLocalStatement_Handler,
		},
		{
			MethodName: "ExecStatementNoReturn",
			Handler:    _MessageService_ExecStatementNoReturn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecStreamStatement",
			Handler:       _MessageService_ExecStreamStatement_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryStreamStatement",
			Handler:       _MessageService_QueryStreamStatement_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryStreamLocalStatement",
			Handler:       _MessageService_QueryStreamLocalStatement_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "qsrmessage/message.proto",
}
